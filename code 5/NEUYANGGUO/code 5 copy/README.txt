This code represents the model. It contains an IAnimationModel class that is the interface for the model, and an AnimationModel that represents the model class. Then there is an IAnimation interface that represents all the instructions that can happen in the model. For now only three classes implements this interface. They are Move, ChangeColor, and Scale class. Move class moves a shape from one place to another. ChangeColor class changes the color data of the shape. Scale class scales the shape to the given size. Then there is Shape interface that represents all the shape that will be created. An AbstractShape abstract class implements the Shape interface. This abstract class construct the basic shape and other shapes can just inherent this abstraction. For now there are two shape classes, Rectangle class and Oval class. When an instruction is passed into the model, the model first creates an IAnimation object corresponding to the instruction. All this IAnimation objects will be checked for validity and if it is valid, it will be added in to a list containing all the instructions. Also, all the Shape object need to be added into the list in a model. Then in the method animate, all the instructions will be executed. First the list containing all the Shape objects will be sorted by their appearing time, then the list containing all the IAnimation objects â€” the instructions, will be sorted by their starting time. After that, the model will execute those instruction one by one. The IAnimation object pass the instruction to the Shape object, and inside the Shape object, the parameters of the given shape will be changed. Then the IAnimation object will produce a String output that will be added to the output. In the end, all the String output of the Shape object will be output first following all the String output about all the instructions. Inside the model, the model will throw Illegal Argument Exceptions when the instruction is invalid or the Shape that are being instruct to animate is not in the model.